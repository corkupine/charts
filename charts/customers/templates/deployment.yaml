apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "customers.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "customers.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "customers.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "customers.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "customers.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - -http.addr=:{{ .Values.service.http.port }}
            - -admin.addr=:{{ .Values.service.admin.port }}
          env:
            - name: LOG_FORMAT
              value: {{ .Values.logFormat | default "plain" }}
            - name: HTTPS_CERT_FILE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-tls-cert
                  key: cert
            - name: HTTPS_KEY_FILE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-tls-cert
                  key: key
            - name: OFAC_ENDPOINT
              value: {{ .Values.ofac.endpoint }}
            - name: OFAC_MATCH_THRESHOLD
              value: {{ .Values.ofac.matchThreshold | quote }}
            # Database
            - name: DATABASE_TYPE
              value: {{ .Values.database.type }}
            - name: MYSQL_ADDRESS
              value: {{ .Values.database.mysql.address }}
            - name: MYSQL_DATABASE
              value: {{ .Values.database.mysql.database }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.database.mysql.password }} # TODO(adam): read from secret?
            - name: MYSQL_USER
              value: {{ .Values.database.mysql.username }} # TODO(adam): read from secret?
            - name: MYSQL_TIMEOUT
              value: {{ .Values.database.mysql.timeout }}
            - name: SQLITE_DB_PATH
              value: {{ .Values.database.sqlite.path }}
            # Secrets
            - name: BUCKET_NAME
              value: {{ .Values.storage.bucketName }}
            - name: CLOUD_PROVIDER
              value: {{ .Values.storage.cloudProvider }}
            # AWS
            - name: AWS_REGION
              value: {{ .Values.storage.aws.region }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.storage.aws.accessKey }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.storage.aws.secretAccessKey }}
            # GCP
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ .Values.storage.gcp.credentials }}
            - name: SECRETS_GCP_KEY_RESOURCE_ID
              value: {{ .Values.storage.gcp.resourceID }}
            # File
            - name: FILEBLOB_BASE_URL
              value: {{ .Values.storage.file.baseUrl }}
            - name: FILEBLOB_HMAC_SECRET
              value: {{ .Values.storage.file.hmacSecret }}
            - name: SECRETS_LOCAL_BASE64_KEY
              value: {{ .Values.storage.file.key }}
            # Vault
            - name: VAULT_SERVER_TOKEN
              value: {{ .Values.storage.vault.token }}
            - name: VAULT_SERVER_URL
              value: {{ .Values.storage.vault.serverUrl }}
          ports:
            - name: http
              containerPort: {{ .Values.service.http.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.service.admin.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            httpGet:
              path: /ping
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
